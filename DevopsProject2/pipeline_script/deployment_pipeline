pipeline {
    agent any

    environment {
        KUBECTL = '/usr/local/bin/kubectl'
        AWS_ACCESS_KEY_ID = credentials('access-key')   // Jenkins credentials ID for AWS Access Key
        AWS_SECRET_ACCESS_KEY = credentials('secret-key')  // Jenkins credentials ID for AWS Secret Key
        AWS_DEFAULT_REGION = 'us-east-1'
    }

    parameters {
        string(name: 'CLUSTER_NAME', defaultValue: 'amazon-prime-cluster', description: 'Enter your EKS cluster name')
    }

    stages {
        stage("Login to EKS") {
            steps {
                script {
                    sh "aws eks --region ${env.AWS_DEFAULT_REGION} update-kubeconfig --name ${params.CLUSTER_NAME}"
                }
            }
        }

        stage("Configure Prometheus & Grafana") {
            steps {
                script {
                    sh """
                    helm repo add stable https://charts.helm.sh/stable || true
                    helm repo add prometheus-community https://prometheus-community.github.io/helm-charts || true
                    helm repo update

                    if ${KUBECTL} get namespace prometheus > /dev/null 2>&1; then
                        helm upgrade kube-prometheus prometheus-community/kube-prometheus-stack -n prometheus --wait
                    else
                        ${KUBECTL} create namespace prometheus
                        helm install kube-prometheus prometheus-community/kube-prometheus-stack -n prometheus --wait
                    fi

                    echo "Listing services in prometheus namespace:"
                    ${KUBECTL} get svc -n prometheus

                    echo "Patching Prometheus service to LoadBalancer"
                    ${KUBECTL} patch svc kube-prometheus-stack-prometheus -n prometheus -p '{"spec": {"type": "LoadBalancer"}}' || echo "Prometheus service patch failed"

                    echo "Patching Grafana service to LoadBalancer"
                    ${KUBECTL} patch svc kube-prometheus-stack-grafana -n prometheus -p '{"spec": {"type": "LoadBalancer"}}' || echo "Grafana service patch failed"
                    """
                }
            }
        }

        stage("Configure ArgoCD") {
            steps {
                script {
                    sh """
                    kubectl create namespace argocd || true
                    kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
                    kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "LoadBalancer"}}'
                    """
                }
            }
        }
    }
}
